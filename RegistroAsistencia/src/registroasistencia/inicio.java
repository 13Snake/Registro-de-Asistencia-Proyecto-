/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package registroasistencia;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author snake
 */
public class inicio extends javax.swing.JFrame {

    /**
     * Creates new form inicio
     */
    public inicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        matricula = new javax.swing.JTextField();
        info = new javax.swing.JButton();
        registro = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("¡Bienvenido a tu tienda!");

        matricula.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        info.setText("Ver Informacion");
        info.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoActionPerformed(evt);
            }
        });

        registro.setText("Registrarse");
        registro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registroActionPerformed(evt);
            }
        });

        jLabel2.setText("Inserta tu ID de Empleado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(registro)
                .addGap(57, 57, 57))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(matricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(info)
                    .addComponent(registro))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void infoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoActionPerformed
        
        String matricula_in=matricula.getText();
        int exist_matri=0;
        try {                                     
            String usuario = "root"; //nombre del usuario
            String clave= ""; //la clave, por lo general es en vacio
            String url = "jdbc:mysql://localhost:3306/registroasistencia"; //donde se encuentra la base de datos
            Connection con; //importar sql.connection para la conexion
            Statement stmt; //importar sql statemenr
            ResultSet rs; //resultado de las consultas
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver"); //hacer la conexion con la base de datos
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(RegistroAsistencia.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            con = DriverManager.getConnection(url,usuario,clave); //montar el servidor
            stmt = con.createStatement(); //inicializar stmt
            //stmt.executeUpdate("INSERT INTO Prueba VALUES(null,'Jair Vega','32','2021-12-13','13:13:13')"); //escribir o cargar datos a la DB
            rs = stmt.executeQuery("SELECT * FROM Empleado");
            rs.next();
            do{
                //System.out.println(rs.getString("IDEmpleado")+" Nombre: "+rs.getString("Nombre")+" Apellido Paterno: "+rs.getString("Apaterno")+" Apalldo Materno: "+rs.getString("Amaterno")+" Puesto: "+rs.getString("Puesto_IDPuesto"));
                String aux = rs.getString("IDEmpleado");
                System.out.println(matricula_in);
                if(matricula_in.equals(aux)) //buscar la matricula
                {
                    System.out.println("ENCONTRADA");
                    exist_matri=1;
                    break;
                }
            }while(rs.next());
            if(exist_matri==0) //sino existe muestro un error
            {
                JOptionPane.showMessageDialog(null, "ID no encontrado, intente de nuevo", "ERROR DE INGRESO", JOptionPane.WARNING_MESSAGE);
            }else{
                this.setVisible(false);
                LocalTime hora_actual = LocalTime.now();
                LocalDate fecha_actual = LocalDate.now();
                
                System.out.println(hora_actual + " " + fecha_actual);
                informacionempleado info = new informacionempleado(matricula_in);
                info.setVisible(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_infoActionPerformed

    private void registroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registroActionPerformed
        
        String matricula_in=matricula.getText();
        String aux;
        int bandera=0;
        int exist_matri=0;
        try {                                     
            String usuario = "root"; //nombre del usuario
            String clave= ""; //la clave, por lo general es en vacio
            String url = "jdbc:mysql://localhost:3306/registroasistencia"; //donde se encuentra la base de datos
            Connection con; //importar sql.connection para la conexion
            Statement stmt; //importar sql statemenr
            ResultSet rs; //resultado de las consultas
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver"); //hacer la conexion con la base de datos
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(RegistroAsistencia.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            con = DriverManager.getConnection(url,usuario,clave); //montar el servidor
            stmt = con.createStatement(); //inicializar stmt
            //stmt.executeUpdate("INSERT INTO Prueba VALUES(null,'Jair Vega','32','2021-12-13','13:13:13')"); //escribir o cargar datos a la DB
            rs = stmt.executeQuery("SELECT * FROM Empleado");
            rs.next();
            do{
                //System.out.println(rs.getString("IDEmpleado")+" Nombre: "+rs.getString("Nombre")+" Apellido Paterno: "+rs.getString("Apaterno")+" Apalldo Materno: "+rs.getString("Amaterno")+" Puesto: "+rs.getString("Puesto_IDPuesto"));
                aux = rs.getString("IDEmpleado");
                if(matricula_in.equals(aux)) //buscar la matricula
                {
                    exist_matri=1;
                    break;
                }
            }while(rs.next());
            if(exist_matri==0) //sino existe muestro un error
            {
                JOptionPane.showMessageDialog(null, "ID no encontrado, intente de nuevo", "ERROR DE INGRESO", JOptionPane.WARNING_MESSAGE);
            }else{
                //SACAR LA FECHA ACTUAL Y DIVIDIRLA EN AÑO, MES Y DIA
                Date date = new Date();
                LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int year  = localDate.getYear();
                int month = localDate.getMonthValue();
                int day   = localDate.getDayOfMonth();
                String fecha = year+"-"+month+"-"+day; //Variable que tiene la fecha actual
                
                if(fecha.length() != 10)
                {
                    fecha = year+"-0"+month+"-0"+day; //Variable que tiene la fecha actual
                }
                
                //SACAR LA HORA ACTUAL Y DIVIDIRLA EN HORAS, MINUTOS Y SEGUNDOS
                Calendar calendario;
                calendario = Calendar.getInstance();
                int hora =calendario.get(Calendar.HOUR_OF_DAY);
                int minutos = calendario.get(Calendar.MINUTE);
                int segundos = calendario.get(Calendar.SECOND);
                String tiempo = hora+":"+minutos+":"+segundos; // Variable que tiene el tiempo actual
                
                //REVISAR SI YA ESTA REGISTRADA SU ASISTENCIA
                con = DriverManager.getConnection(url,usuario,clave); //montar el servidor
                stmt = con.createStatement(); //inicializar stmt

                rs = stmt.executeQuery("SELECT * FROM RegistroAsistencia WHERE Empleado_IDEmpleado="+matricula_in);
                if(rs.next())
                {
                    do{
                        aux = rs.getString("FechaRegistro");
                        if(aux.equals(fecha) && bandera==0)
                        {
                            System.out.println("ya registrado");
                            bandera = 1;
                            break;
                        }
                    }while(rs.next());
                }
                
                if(bandera==0)
                {
                    this.setVisible(false);
                    asistenciaregistrada page_asistencia = new asistenciaregistrada(matricula_in,fecha,tiempo);
                    page_asistencia.setVisible(true);
                }else{
                    JOptionPane.showMessageDialog(null, "Su asistencia ya ha sido registrada", "REGISTRO ASISTENCIA", JOptionPane.WARNING_MESSAGE);
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_registroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField matricula;
    private javax.swing.JToggleButton registro;
    // End of variables declaration//GEN-END:variables
}
